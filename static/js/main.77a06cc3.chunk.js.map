{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","power","powercol","display","handlePower","_this","setState","handleKeyPress","e","audio","document","getElementById","String","toUpperCase","key","play","src","parentNode","focus","console","log","parentElement","className","handleClick","target","innerText","addEventListener","this","removeEventListener","react_default","a","createElement","Container","id","Row","Button","color","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAqFeA,6MAjFbC,MAAQ,CACNC,MAAO,KACPC,SAAU,UACVC,QAAS,WAGXC,YAAc,WACa,OAArBC,EAAKL,MAAMC,MACbI,EAAKC,SAAS,CAACL,MAAO,MAAOC,SAAU,SAEvCG,EAAKC,SAAS,CAACL,MAAO,KAAMC,SAAU,eAG1CK,eAAiB,SAACC,GACjB,IAAIC,EAAQC,SAASC,eAAeC,OAAOC,YAAYL,EAAEM,MAC3C,OAAVL,GAAuC,OAArBJ,EAAKL,MAAMC,QAChCQ,EAAMM,OACNV,EAAKC,SAAS,CAACH,QAASM,EAAMO,MAC9BP,EAAMQ,WAAWC,QACjBC,QAAQC,IAAIX,EAAMY,cAAcC,eAGlCC,YAAc,SAACf,GACb,IAAIC,EAAQC,SAASC,eAAeH,EAAEgB,OAAOC,WACpB,OAArBpB,EAAKL,MAAMC,QACbQ,EAAMM,OACNV,EAAKC,SAAS,CAACH,QAASM,EAAMO,MAC9BP,EAAMQ,WAAWC,6FAInBR,SAASgB,iBAAiB,WAAYC,KAAKpB,+DAG3CG,SAASkB,oBAAoB,WAAYD,KAAKpB,iDAI9C,OACEsB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWV,UAAU,aAAaW,GAAG,gBACnCJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKZ,UAAU,eACbO,EAAAC,EAAAC,cAAA,OAAKT,UAAU,8BACXO,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,MAAM,UAAUd,UAAU,qBAAqBW,GAAG,SAASI,QAASV,KAAKJ,aAAjF,IACEM,EAAAC,EAAAC,cAAA,SAAOT,UAAU,OAAON,IAAI,2DAA2DiB,GAAG,OAE5FJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,MAAM,UAAUd,UAAU,qBAAqBW,GAAG,SAASI,QAASV,KAAKJ,aAAjF,IACEM,EAAAC,EAAAC,cAAA,SAAOT,UAAU,OAAON,IAAI,2DAA2DiB,GAAG,OAE5FJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,MAAM,UAAUd,UAAU,qBAAqBW,GAAG,SAASI,QAASV,KAAKJ,aAAjF,IACEM,EAAAC,EAAAC,cAAA,SAAOT,UAAU,OAAON,IAAI,2DAA2DiB,GAAG,OAE5FJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,MAAM,UAAUd,UAAU,qBAAqBW,GAAG,SAASI,QAASV,KAAKJ,aAAjF,IACEM,EAAAC,EAAAC,cAAA,SAAOT,UAAU,OAAON,IAAI,6DAA6DiB,GAAG,OAE9FJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,MAAM,UAAUd,UAAU,qBAAqBW,GAAG,SAASI,QAASV,KAAKJ,aAAjF,IACEM,EAAAC,EAAAC,cAAA,SAAOT,UAAU,OAAON,IAAI,2DAA2DiB,GAAG,OAE5FJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,MAAM,UAAUd,UAAU,qBAAqBW,GAAG,SAASI,QAASV,KAAKJ,aAAjF,IACEM,EAAAC,EAAAC,cAAA,SAAOT,UAAU,OAAON,IAAI,yDAAyDiB,GAAG,OAE1FJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,MAAM,UAAUd,UAAU,qBAAqBW,GAAG,SAASI,QAASV,KAAKJ,aAAjF,IACEM,EAAAC,EAAAC,cAAA,SAAOT,UAAU,OAAON,IAAI,6DAA6DiB,GAAG,OAE9FJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,MAAM,UAAUd,UAAU,qBAAqBW,GAAG,SAASI,QAASV,KAAKJ,aAAjF,IACEM,EAAAC,EAAAC,cAAA,SAAOT,UAAU,OAAON,IAAI,6DAA6DiB,GAAG,OAE9FJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,MAAM,UAAUd,UAAU,qBAAqBW,GAAG,SAASI,QAASV,KAAKJ,aAAjF,IACEM,EAAAC,EAAAC,cAAA,SAAOT,UAAU,OAAON,IAAI,yDAAyDiB,GAAG,QAG9FJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUX,UAAU,yBAC1BO,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,MAAOT,KAAK3B,MAAME,SAAUoB,UAAU,cAAce,QAASV,KAAKvB,aAA1E,SAA8FuB,KAAK3B,MAAMC,OACzG4B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,MAAM,UAAUd,UAAU,cAAcW,GAAG,WAAWN,KAAK3B,MAAMG,mBAzEnEmC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASpC,SAASC,eAAe,SD0H3C,kBAAmBoC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.77a06cc3.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Container, Row, Button} from 'reactstrap';\n\nclass App extends Component {\n  state = {\n    power: 'on',\n    powercol: 'success',\n    display: 'sound',\n  }\n\n  handlePower = () => {\n    if (this.state.power === 'on') {\n      this.setState({power: 'off', powercol: 'dark'})\n    } else {\n      this.setState({power: 'on', powercol: 'success'})\n    }\n  }\n  handleKeyPress = (e) => {\n   let audio = document.getElementById(String.toUpperCase(e.key));\n   if (audio !== null && this.state.power === 'on') {\n    audio.play();\n    this.setState({display: audio.src});\n    audio.parentNode.focus();\n    console.log(audio.parentElement.className)\n   }\n  }\n  handleClick = (e) => {\n    let audio = document.getElementById(e.target.innerText);\n    if (this.state.power === 'on') {\n      audio.play();\n      this.setState({display: audio.src});\n      audio.parentNode.focus();\n    }\n  }\n  componentDidMount() {\n    document.addEventListener('keypress', this.handleKeyPress);\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keypress', this.handleKeyPress);\n  }\n\n  render() {\n    return (\n      <Container className=\"App vh-100\" id=\"drum-machine\">\n        <Row className=\"w-100 h-100\">\n          <div className=\"drum col align-self-center\">\n              <Button color=\"primary\" className=\"drum-pad col-3 m-2\" id=\"drum-q\" onClick={this.handleClick}>Q\n                <audio className=\"clip\" src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\" id=\"Q\"></audio>\n              </Button>\n              <Button color=\"primary\" className=\"drum-pad col-3 m-2\" id=\"drum-w\" onClick={this.handleClick}>W\n                <audio className=\"clip\" src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\" id=\"W\"></audio>\n              </Button>\n              <Button color=\"primary\" className=\"drum-pad col-3 m-2\" id=\"drum-e\" onClick={this.handleClick}>E\n                <audio className=\"clip\" src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\" id=\"E\"></audio>\n              </Button>\n              <Button color=\"primary\" className=\"drum-pad col-3 m-2\" id=\"drum-a\" onClick={this.handleClick}>A\n                <audio className=\"clip\" src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\" id=\"A\"></audio>\n              </Button>\n              <Button color=\"primary\" className=\"drum-pad col-3 m-2\" id=\"drum-s\" onClick={this.handleClick}>S\n                <audio className=\"clip\" src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\" id=\"S\"></audio>\n              </Button>\n              <Button color=\"primary\" className=\"drum-pad col-3 m-2\" id=\"drum-d\" onClick={this.handleClick}>D\n                <audio className=\"clip\" src=\"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\" id=\"D\"></audio>\n              </Button>\n              <Button color=\"primary\" className=\"drum-pad col-3 m-2\" id=\"drum-z\" onClick={this.handleClick}>Z\n                <audio className=\"clip\" src=\"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\" id=\"Z\"></audio>\n              </Button>\n              <Button color=\"primary\" className=\"drum-pad col-3 m-2\" id=\"drum-x\" onClick={this.handleClick}>X\n                <audio className=\"clip\" src=\"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\" id=\"X\"></audio>\n              </Button>\n              <Button color=\"primary\" className=\"drum-pad col-3 m-2\" id=\"drum-c\" onClick={this.handleClick}>C\n                <audio className=\"clip\" src=\"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\" id=\"C\"></audio>\n              </Button>\n          </div>\n          <div id=\"machine\" className=\"col align-self-center\">\n            <Button color={this.state.powercol} className=\"col-12 mb-4\" onClick={this.handlePower}>Power {this.state.power}</Button>\n            <Button color=\"primary\" className=\"col-12 mb-4\" id=\"display\">{this.state.display}</Button>\n          </div>\n          \n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}